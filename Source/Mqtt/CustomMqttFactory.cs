using System;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using mqttHub.Configuration;
using MQTTnet;
using MQTTnet.Adapter;
using MQTTnet.Diagnostics;
using MQTTnet.Server;

namespace mqttHub.Mqtt;

public sealed class CustomMqttFactory
{
    readonly IMqttNetLogger _logger;
    readonly MqttFactory _mqttFactory;

    // ReSharper disable once ContextualLoggerProblem
    public CustomMqttFactory(MqttSettingsModel settings, ILogger<MqttServer> logger)
    {
        if (settings == null)
        {
            throw new ArgumentNullException(nameof(settings));
        }

        if (logger == null)
        {
            throw new ArgumentNullException(nameof(logger));
        }

        // It is important to avoid injecting the logger wrapper to ensure that no
        // unused log messages are generated by the MQTTnet library. Debug logging
        // has a huge performance impact.
        if (settings.EnableDebugLogging)
        {
            var mqttNetLogger = new MqttNetLoggerWrapper(logger);
            _mqttFactory = new MqttFactory(mqttNetLogger);

            logger.LogWarning("Debug logging is enabled. Performance is decreased!");
        }
        else
        {
            _mqttFactory = new MqttFactory();
        }

        _logger = _mqttFactory.DefaultLogger;
    }

    public MqttServer CreateMqttServer(MqttServerOptions options, List<IMqttServerAdapter> adapters)
    {
        if (options == null)
        {
            throw new ArgumentNullException(nameof(options));
        }

        if (adapters == null)
        {
            throw new ArgumentNullException(nameof(adapters));
        }

        return _mqttFactory.CreateMqttServer(options, adapters, _logger);
    }
}